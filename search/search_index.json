{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Attendance Ontologia per la registrazione delle presenze in aula Relazione elaborato Web Semantico Luca Giorgietti luca.giorgietti7@studio.unibo.it Daniele Tentoni daniele.tentoni2@studio.unibo.it Sviluppo Ontologia Classi Di seguito viene riportato uno schema di massima della nostra ontologia: classDiagram `Didactic Activity` <-- Workgroup : Association Class <-- Workgroup Teacher <-- Workgroup class `Didactic Activity` { +string Name } class Class { +int Number } class Workgroup { +Year isValid() } Workgroup *.. Exam : Composition class Exam { +List~turn~ hasTurn } Workgroup *.. Lesson class Lesson { +List<Student> hasStudent : from inheritance } turn <|-- Exam class turn[\"Exam Turn\"] { +List<Student> hasStudent : from inheritance } link turn \"/SemanticWebAttendance#exam-turn\" Lesson <|-- Attendable : Inheritance Exam Turn <|-- Attendable : Inheritance class Attendable { +List<Student> hasStudentManual } Pin <-- Attendable class Pin { +string Code } Person o-- Teacher : Aggregation Person o-- Tutor Person o-- Student link Person \"/SemanticWebAttendance#person\" class Person { string GivenName string FamilyName } class group[\"Student Group\"] { +List~Student~ } link group \"/SemanticWebAttendance#student-group\" group --|> Class group --|> turn group --|> Lesson group \"n\" --> \"m\" Student : hasStudent Sopra: uno schema di massima della nostra ontologia Vengono riportate le classi modellate in due classi pi\u00f9 rilevanti e le altre (???). Person Questo sostantivo rappresenta una qualunque persona interagisca con un sistema scolastico. Nel nostro elaborato esso modella solamente poche di tutte le possibilit\u00e0, nello specifico: Teacher : chi tiene le lezioni Tutor : chi aiuta a gestire uno specifico workgroup Student : chi segue le lezioni Workgroup Rappresenta una Classe che partecipa in un determinato anno didattico e semestre ad una Attivit\u00e0 Didattica . Classe Rappresenta un gruppo di studenti iscritti in un certo anno accademico. Attivit\u00e0 Didattica Rappresenta un corso di studio insegnato nella scuola. Un esempio pu\u00f2 essere Matematica o Economia . Attendable Rappresenta un concetto(???) sul quale pu\u00f2 essere registrata una presenza. Lesson Rappresenta un quanto di tempo dove gli studenti seguono un professore . Eventualemnte, il professore pu\u00f2 essere aiutato o sostituito da un tutor . Exam Rappresenta un quanto di tempo dove gli studenti , divisi in turni svolgono la propria prova. Exam Turn Rappresenta un quanto di tempo dove una parte di studenti iscritti ad un esame svolge la propria prova. Pin Rappresenta un codice a 6 cifre che le persone usano per registrare la loro presenza ad un Attendable . Possiede una data di creazione ( creation_date ) da valorizzare quando viene generato il Pin che \u00e8 usata per calcolare tramite la regola ... la data di scadenza dello stesso. Allo scoccare della scadenza non sar\u00e0 pi\u00f9 possibile registrare una presenza sul Pin. Elenco delle propriet\u00e0 ??? Attendance Rappresenta una registrazione di una presenza. Essa quindi richiede un Pin associato ad un Attendable , cio\u00e8 un impegno sul quale possa essere registrata una presenza. Student Group Rappresenta un gruppo di studenti. Questa classe \u00e8 usata esclusivamente nell'ontologia come superclasse per conferire la propriet\u00e0 hasStudent alle sue sottoclassi Object Properties Di seguito vengono specificate le principali Object Properties modellate. Vengono elencate ma non esaustivamente spiegate le properties usate dalle ontologie importate. hasStudent vs hasStudentManual La prima propriet\u00e0 esprime un elenco di studenti che appartengono ad un determinato Student Group a priori, mentre la seconda un elenco di studenti aggiunti a posteriori ad un Attendable. Regole Semantiche Interrogazioni Tramite questa sintassi esprimiamo alcune delle pi\u00f9 comuni query che potrebbero essere svolte sulla nostra ontologia. Query : L'ultimo pin creato per un Attendable Ultimo pin valido per un determinato attendable Selezioniamo l'ultimo pin valido per un attendable. Questa interrogazione viene usata quando si vuole presentare il pin sul quale gli studenti possono registrare la loro presenza. In questo caso l'Attendable da usare \u00e8 gi\u00e0 noto, basta ordinare per data di creazione decresente i Pin che sono di un certo Attendable e prendere solo il primo. SELECT ?pin WHERE { ?attendable att:hasPin ?pin . ?pin att:creation-date ?creationDate . ?pin att:expiration-date ?expirationDate . BIND( now() AS ?currentDateTime ) # Get current date time FILTER (?attendable = att:LES_WS_2023_05_21) # This is the parameter FILTER (?expirationDate >= ?currentDateTime) } ORDER BY DESC(?creationDate) LIMIT 1 Tutti i workgroup attivi per un determinato utente Selezioniamo tutti i workgroup attivi per un utente per capire quali lezioni dovr\u00e0 seguire o quali esami sostenere. # Retrieve all workgroup for a student. SELECT ?workgroup ?da ?teacher ?term WHERE { ?student att:isStudentOf ?class . ?class att:isClassOf ?workgroup . ?workgroup att:hasDidacticActivity ?da ; att:hasTeacher ?teacher ; att:wrk-term ?term . FILTER (?student = att:STU_00001_MarioRossi) } ORDER BY ?term Estrai uno studente presente casualmente Seleziono uno studente preso a caso tra i presenti a lezione per verificare se realmente sia presente o \u00e8 stato registrato da qualcun altro in modo malizioso. In questo caso devo recuperare da tutti pin usati per la lezione tutte le presenze di un qualsiasi tipo valido e ne leggo soltanto una, la prima tra tutte quelle recuperate riordinate a caso. # Retrieve all attendance from an attendable. SELECT ?attendance WHERE { ?attendable att:hasPin ?pin . ?pin att:hasAttendance ?attendance . ?attendance rdf:type att:AttendanceValid . FILTER (?attendable = att:LES_WS_2023_05_22) # This is the parameter } # Then order them randomly and take the first one. ORDER BY RAND() LIMIT 1 Studenti che possono sostenere l'esame (presenze > di tot %) # Students having a presence frequency at DA_WebSemantico higher (or equal) to 75% SELECT ?student ?percentage WHERE { { SELECT ?student (count(?attendance) AS ?tot_freq) WHERE { ?wrk att:hasClass ?class . ?class att:hasStudent ?student . OPTIONAL { ?wrk att:hasLesson ?lesson . ?lesson att:hasPin ?pin . ?pin att:hasAttendance ?attendance . ?attendance att:hasAttendant ?student . { ?attendance rdf:type att:AttendanceValid . } UNION { ?attendance rdfs:subClassOf att:AttendanceValid . } ?attendance att:hasAttendant att:STU_00001_MarioRossi . } FILTER (?wrk = att:WRK_CL_001_DA_WebSemantico_2023) } GROUP BY ?student } { SELECT (count(?lesson) AS ?tot) WHERE { ?wrk att:hasLesson ?lesson . FILTER (?wrk = att:WRK_CL_001_DA_WebSemantico_2023) } } FILTER (?percentage > 75) } Registro delle presenze # Exam turn register SELECT ?student ?attendance WHERE { ?exam att:hasTurn ?turn . ?turn att:hasStudent ?student . OPTIONAL { ?turn att:hasPin ?pin . ?pin att:hasAttendance ?attendance . ?attendance att:hasAttendant ?student . { ?attendance rdf:type att:AttendanceValid . } UNION { ?attendance rdfs:subClassOf att:AttendanceValid . } } FILTER (?exam = att:EX_WS_2023_06_26) } ORDER BY ?student","title":"Index"},{"location":"#sviluppo-ontologia","text":"","title":"Sviluppo Ontologia"},{"location":"#classi","text":"Di seguito viene riportato uno schema di massima della nostra ontologia: classDiagram `Didactic Activity` <-- Workgroup : Association Class <-- Workgroup Teacher <-- Workgroup class `Didactic Activity` { +string Name } class Class { +int Number } class Workgroup { +Year isValid() } Workgroup *.. Exam : Composition class Exam { +List~turn~ hasTurn } Workgroup *.. Lesson class Lesson { +List<Student> hasStudent : from inheritance } turn <|-- Exam class turn[\"Exam Turn\"] { +List<Student> hasStudent : from inheritance } link turn \"/SemanticWebAttendance#exam-turn\" Lesson <|-- Attendable : Inheritance Exam Turn <|-- Attendable : Inheritance class Attendable { +List<Student> hasStudentManual } Pin <-- Attendable class Pin { +string Code } Person o-- Teacher : Aggregation Person o-- Tutor Person o-- Student link Person \"/SemanticWebAttendance#person\" class Person { string GivenName string FamilyName } class group[\"Student Group\"] { +List~Student~ } link group \"/SemanticWebAttendance#student-group\" group --|> Class group --|> turn group --|> Lesson group \"n\" --> \"m\" Student : hasStudent Sopra: uno schema di massima della nostra ontologia Vengono riportate le classi modellate in due classi pi\u00f9 rilevanti e le altre (???).","title":"Classi"},{"location":"#person","text":"Questo sostantivo rappresenta una qualunque persona interagisca con un sistema scolastico. Nel nostro elaborato esso modella solamente poche di tutte le possibilit\u00e0, nello specifico: Teacher : chi tiene le lezioni Tutor : chi aiuta a gestire uno specifico workgroup Student : chi segue le lezioni","title":"Person"},{"location":"#workgroup","text":"Rappresenta una Classe che partecipa in un determinato anno didattico e semestre ad una Attivit\u00e0 Didattica .","title":"Workgroup"},{"location":"#classe","text":"Rappresenta un gruppo di studenti iscritti in un certo anno accademico.","title":"Classe"},{"location":"#attivita-didattica","text":"Rappresenta un corso di studio insegnato nella scuola. Un esempio pu\u00f2 essere Matematica o Economia .","title":"Attivit\u00e0 Didattica"},{"location":"#attendable","text":"Rappresenta un concetto(???) sul quale pu\u00f2 essere registrata una presenza.","title":"Attendable"},{"location":"#lesson","text":"Rappresenta un quanto di tempo dove gli studenti seguono un professore . Eventualemnte, il professore pu\u00f2 essere aiutato o sostituito da un tutor .","title":"Lesson"},{"location":"#exam","text":"Rappresenta un quanto di tempo dove gli studenti , divisi in turni svolgono la propria prova.","title":"Exam"},{"location":"#exam-turn","text":"Rappresenta un quanto di tempo dove una parte di studenti iscritti ad un esame svolge la propria prova.","title":"Exam Turn"},{"location":"#pin","text":"Rappresenta un codice a 6 cifre che le persone usano per registrare la loro presenza ad un Attendable . Possiede una data di creazione ( creation_date ) da valorizzare quando viene generato il Pin che \u00e8 usata per calcolare tramite la regola ... la data di scadenza dello stesso. Allo scoccare della scadenza non sar\u00e0 pi\u00f9 possibile registrare una presenza sul Pin. Elenco delle propriet\u00e0 ???","title":"Pin"},{"location":"#attendance","text":"Rappresenta una registrazione di una presenza. Essa quindi richiede un Pin associato ad un Attendable , cio\u00e8 un impegno sul quale possa essere registrata una presenza.","title":"Attendance"},{"location":"#student-group","text":"Rappresenta un gruppo di studenti. Questa classe \u00e8 usata esclusivamente nell'ontologia come superclasse per conferire la propriet\u00e0 hasStudent alle sue sottoclassi","title":"Student Group"},{"location":"#object-properties","text":"Di seguito vengono specificate le principali Object Properties modellate. Vengono elencate ma non esaustivamente spiegate le properties usate dalle ontologie importate.","title":"Object Properties"},{"location":"#hasstudent-vs-hasstudentmanual","text":"La prima propriet\u00e0 esprime un elenco di studenti che appartengono ad un determinato Student Group a priori, mentre la seconda un elenco di studenti aggiunti a posteriori ad un Attendable.","title":"hasStudent vs hasStudentManual"},{"location":"#regole-semantiche","text":"","title":"Regole Semantiche"},{"location":"#interrogazioni","text":"Tramite questa sintassi esprimiamo alcune delle pi\u00f9 comuni query che potrebbero essere svolte sulla nostra ontologia. Query : L'ultimo pin creato per un Attendable","title":"Interrogazioni"},{"location":"#ultimo-pin-valido-per-un-determinato-attendable","text":"Selezioniamo l'ultimo pin valido per un attendable. Questa interrogazione viene usata quando si vuole presentare il pin sul quale gli studenti possono registrare la loro presenza. In questo caso l'Attendable da usare \u00e8 gi\u00e0 noto, basta ordinare per data di creazione decresente i Pin che sono di un certo Attendable e prendere solo il primo. SELECT ?pin WHERE { ?attendable att:hasPin ?pin . ?pin att:creation-date ?creationDate . ?pin att:expiration-date ?expirationDate . BIND( now() AS ?currentDateTime ) # Get current date time FILTER (?attendable = att:LES_WS_2023_05_21) # This is the parameter FILTER (?expirationDate >= ?currentDateTime) } ORDER BY DESC(?creationDate) LIMIT 1","title":"Ultimo pin valido per un determinato attendable"},{"location":"#tutti-i-workgroup-attivi-per-un-determinato-utente","text":"Selezioniamo tutti i workgroup attivi per un utente per capire quali lezioni dovr\u00e0 seguire o quali esami sostenere. # Retrieve all workgroup for a student. SELECT ?workgroup ?da ?teacher ?term WHERE { ?student att:isStudentOf ?class . ?class att:isClassOf ?workgroup . ?workgroup att:hasDidacticActivity ?da ; att:hasTeacher ?teacher ; att:wrk-term ?term . FILTER (?student = att:STU_00001_MarioRossi) } ORDER BY ?term","title":"Tutti i workgroup attivi per un determinato utente"},{"location":"#estrai-uno-studente-presente-casualmente","text":"Seleziono uno studente preso a caso tra i presenti a lezione per verificare se realmente sia presente o \u00e8 stato registrato da qualcun altro in modo malizioso. In questo caso devo recuperare da tutti pin usati per la lezione tutte le presenze di un qualsiasi tipo valido e ne leggo soltanto una, la prima tra tutte quelle recuperate riordinate a caso. # Retrieve all attendance from an attendable. SELECT ?attendance WHERE { ?attendable att:hasPin ?pin . ?pin att:hasAttendance ?attendance . ?attendance rdf:type att:AttendanceValid . FILTER (?attendable = att:LES_WS_2023_05_22) # This is the parameter } # Then order them randomly and take the first one. ORDER BY RAND() LIMIT 1","title":"Estrai uno studente presente casualmente"},{"location":"#studenti-che-possono-sostenere-lesame-presenze-di-tot","text":"# Students having a presence frequency at DA_WebSemantico higher (or equal) to 75% SELECT ?student ?percentage WHERE { { SELECT ?student (count(?attendance) AS ?tot_freq) WHERE { ?wrk att:hasClass ?class . ?class att:hasStudent ?student . OPTIONAL { ?wrk att:hasLesson ?lesson . ?lesson att:hasPin ?pin . ?pin att:hasAttendance ?attendance . ?attendance att:hasAttendant ?student . { ?attendance rdf:type att:AttendanceValid . } UNION { ?attendance rdfs:subClassOf att:AttendanceValid . } ?attendance att:hasAttendant att:STU_00001_MarioRossi . } FILTER (?wrk = att:WRK_CL_001_DA_WebSemantico_2023) } GROUP BY ?student } { SELECT (count(?lesson) AS ?tot) WHERE { ?wrk att:hasLesson ?lesson . FILTER (?wrk = att:WRK_CL_001_DA_WebSemantico_2023) } } FILTER (?percentage > 75) }","title":"Studenti che possono sostenere l'esame (presenze &gt; di tot %)"},{"location":"#registro-delle-presenze","text":"# Exam turn register SELECT ?student ?attendance WHERE { ?exam att:hasTurn ?turn . ?turn att:hasStudent ?student . OPTIONAL { ?turn att:hasPin ?pin . ?pin att:hasAttendance ?attendance . ?attendance att:hasAttendant ?student . { ?attendance rdf:type att:AttendanceValid . } UNION { ?attendance rdfs:subClassOf att:AttendanceValid . } } FILTER (?exam = att:EX_WS_2023_06_26) } ORDER BY ?student","title":"Registro delle presenze"}]}